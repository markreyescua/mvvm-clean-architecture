plugins {
    id('com.android.application')
    id('kotlin-android')
    id('kotlin-kapt')
    id('androidx.navigation.safeargs.kotlin')
    id('dagger.hilt.android.plugin')
}

ext {
    currentVersionCode = 1
    currentVersionName = "1.0.0"
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.mcua.architecture"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode currentVersionCode
        versionName currentVersionName
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        dataBinding = true
    }
    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            resValue "string", "app_name", "MVVM Architecture Develop"
            resValue "string", "BASE_URL", "http://localhost:3000/"
            applicationIdSuffix '.dev'
            manifestPlaceholders = [scheme: ".dev"]
            versionName = "$currentVersionName-dev"
        }
        stg {
            dimension "environment"
            resValue "string", "app_name", "MVVM Architecture Staging"
            resValue "string", "BASE_URL", "http://localhost:3000/"
            applicationIdSuffix '.staging'
            manifestPlaceholders = [scheme: ".stg"]
            versionName = "$currentVersionName-stg"
        }
        prd {
            dimension "environment"
            resValue "string", "app_name", "MVVM Architecture"
            resValue "string", "BASE_URL", "http://localhost:3000/"
            manifestPlaceholders = [scheme: ""]
            versionName = "$currentVersionName"
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "app"
            def flavor = variant.productFlavors[0].name
            def version = variant.versionName
            def date = new Date()
            def formattedDate = date.format('MM-dd-yy')
            def newApkName = project + "-" + flavor + "-" + version + "-(" + formattedDate + ").apk"
            outputFileName = new File(newApkName)
        }
    }
    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword 'release'
            keyAlias 'release'
            keyPassword 'release'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version")
    implementation('androidx.core:core-ktx:1.5.0')
    implementation('androidx.appcompat:appcompat:1.3.0')
    implementation('com.google.android.material:material:1.3.0')
    implementation('androidx.constraintlayout:constraintlayout:2.0.4')

    //Multidex
    implementation("androidx.multidex:multidex:$multidex_version")

    // navigation
    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")

    // application life cycle extension
    implementation("android.arch.lifecycle:extensions:$lifecycle_ext_version")

    // coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version")

    // room database
    implementation("androidx.room:room-runtime:$room_version")
    implementation("androidx.legacy:legacy-support-v4:$room_legacy_support_version")
    kapt("androidx.room:room-compiler:$room_version")
    implementation("androidx.room:room-ktx:$room_version")

    // data store
    implementation("androidx.datastore:datastore:$datastore_version")
    implementation("androidx.datastore:datastore-preferences:$datastore_version")

    // HILT dependency injection + fragment + view model
    implementation("androidx.fragment:fragment-ktx:$fragment_version")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$viewmodel_ktx_version")
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")

    // RETROFIT
    implementation("com.squareup.retrofit2:retrofit:$retrofit_version")
    implementation("com.squareup.retrofit2:converter-gson:$retrofit_version")
    implementation("com.squareup.retrofit2:adapter-rxjava2:$retrofit_version")
    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttp_version")

    // Glide
    implementation("com.github.bumptech.glide:glide:$glide_version")
    annotationProcessor("com.github.bumptech.glide:compiler:$glide_version")

    // Stetho
    implementation("com.facebook.stetho:stetho:$stetho_version")
    implementation("com.facebook.stetho:stetho-okhttp3:$stetho_version")

    testImplementation('junit:junit:4.+')
    androidTestImplementation('androidx.test.ext:junit:1.1.2')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0')
}